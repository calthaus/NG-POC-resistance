# # timeline.r <- f2(times, coef(lsqf)[1], coef(lsqf)[2])
# # lines(times, timeline.r, col=8)
# mini-model
library(deSolve)
model <- function(t, x, parms) {
with(as.list(parms),{
dx <- numeric()
dx[1] <- -a*x[2]*x[1]-a*(x[3]+x[4])*x[1]+b*x[2]+b*x[3]+b*x[4]+c*x[2]+e*x[4]
dx[2] <- a*x[2]*x[1]-b*x[2]-c*x[2]
dx[3] <- a*(x[3]+x[4])*x[1]-b*x[3]-d*x[3]
dx[4] <- d*x[3]-b*x[4]-e*x[4]
list(dx)
})
}
init <- c(0.8, 0.1, 0.1, 0)
times <- seq(0,500,0.1)
a <- 0.6
b <- 0.1
c <- 0.2
d <- 0.3
e <- 0.3
parms <- c(a=a,b=b,c=c,d=d,e=e)
run <- lsoda(init, times, model, parms)
run[,-1] <- run[,-1]*100
tran <- 1:nrow(run)
par(mfrow=c(2,1))
plot(run[tran,1], run[tran,2], type="l", ylim=c(0,100))
lines(run[tran,1], run[tran,3], col=2)
lines(run[tran,1], run[tran,4], col=3)
lines(run[tran,1], run[tran,5], col=4)
lines(run[tran,1], rowSums(run[tran,c(4,5)]), col=5)
lines(run[tran,1], rowSums(run[tran,-1]), col=6)
legend("topright", legend=c("S", "IS", "IR", "W", "ALLR", "SUM"), fill=1:6)
plot(run[tran,1], run[tran,3]/rowSums(run[tran,c(3,4,5)]), type="l", col=1, ylim=c(0,1))
lines(run[tran,1], run[tran,4]/rowSums(run[tran,c(3,4,5)]), col=2)
lines(run[tran,1], run[tran,5]/rowSums(run[tran,c(3,4,5)]), col=3)
lines(run[tran,1], rowSums(run[tran,c(4,5)])/rowSums(run[tran,c(3,4,5)]), col=4)
legend("topright", legend=c("propIS", "propIR", "propW", "propALLR"), fill=1:4)
# plot(run[tran[-1],1], rowSums(run[tran[-1],c(4,5)])/run[tran[-1],3], type="l", col=1, log="y", ylim=c(0.1,100000))
par(mfrow=c(1,1))
plot(run[tran,1], run[tran,3]/rowSums(run[tran,c(3,4,5)]), type="l", col=1, log="y", ylim=c(10^-10,10^10))
lines(run[tran,1], rowSums(run[tran,c(4,5)])/run[tran,3], col=5)
lines(run[tran,1], run[tran,4]/rowSums(run[tran,c(3,4,5)]), col=2)
lines(run[tran,1], run[tran,5]/rowSums(run[tran,c(3,4,5)]), col=3)
lines(run[tran,1], rowSums(run[tran,c(4,5)])/rowSums(run[tran,c(3,4,5)]), col=4)
legend("topright", legend=c("propIS", "propIR", "propW", "propALLR"), fill=1:4)
f1 <- function(time,ratio,rate) {
1/(1+ratio*exp(-rate*time))
}
f2 <- function(time,ratio,rate){
ratio*exp(rate*time)
}
Iw.Irw <- run[,5]/rowSums(run[,c(4,5)])
Ir.Iw <- run[,4]/run[,5]
Iw.Ir <- run[,5]/run[,4]
timeline.s <- f2(times, 1, c-e/(1+Ir.Iw))
lines(times, timeline.s, col=6)
timeline.r <- f1(times, 1, -c+e/(1+Ir.Iw))
lines(times, timeline.r, col=8)
# timeline.s <- f1(times, 1, -c+b+e)
# lines(times, timeline.s, col=9)
# timeline.r <- f1(times, 1, c-b-e)
# lines(times, timeline.r, col=10)
# timeline.s <- f1(times, 1, a-b-c-d*(a-b)+b+e)
# lines(times, timeline.s, col=6)
# timeline.r <- f1(times, 1, c-d)
# lines(times, timeline.r, col=8)
# R <- rowSums(run[tran,c(4,5)])/run[tran,3]
# f2 <- function(time,a,b){
#   a*exp(-b*time)
# }
# y <- diff(R)[1:100]
# x <- run[2:101,1]
#
# lsqf <- nls(y ~ f2(x,a,b), start=c(a=2,b=0), control = list(maxiter = 500))
#
#
# timeline.s <- f2(times, 1, coef(lsqf)[2])
# lines(times, timeline.s, col=6)
# # timeline.r <- f2(times, coef(lsqf)[1], coef(lsqf)[2])
# # lines(times, timeline.r, col=8)
IRW <- rowSums[,c(4,5)]
IRW <- rowSums(run[,c(4,5)])
IRW
IS <- run[,3]
prop <- IRW/(IRW+IS)
prop
plot(run[,1], prop)
plot(run[,1], prop, ylim=c(0,1), type="l")
ratio <- IRW/IS
lines(run[,1], ratio, col=2)
plot(run[,1], prop, ylim=c(0,10), type="l")
ratio <- IRW/IS
lines(run[,1], ratio, col=2)
lines(run[,1], 1/(1+1/ratio), col=3)
1/(1+1/ratio)-IRW
1/(1+1/ratio)-IRW/IS
hist(1/(1+1/ratio)-IRW/IS)
IRW/IS
plot(run[,1], IRW/IS)
plot(run[,1], IRW/IS, type="l")
IRW/IS-1/(1+1/(IRW/(IRW+S)))
IRW/IS-1/(1+1/(IRW/(IRW+IS)))
IRW/IS-1/(1+1/(IRW/(IRW+IS)))
hist(IRW/IS-1/(1+1/(IRW/(IRW+IS))))
1/(1+1/(IRW/(IRW+IS)))
IRW+IS
IS
IRW
IRW
(IRW/(IRW+IS)
(IRW/(IRW+IS))
(IRW/(IRW+IS))
hist(IRW/IS-(IRW/(IRW+IS))/(1-(IRW/(IRW+IS))))
IRW/IS-
(
(IRW/(IRW+IS))
/(1-(IRW/(IRW+IS))))
IRW/IS
plot(run[,1], IRW/IS, type="l")
hist(ratio-((prop)/(1-prop))))
hist(ratio-(prop/(1-prop)))
hist(1/(1+1/ratio)-IRW/IS)
hist(ratio-(prop/(1-prop)))
plot(run[,1], IRW/IS, type="l")
lines(run[,1], )
lines(run[,1], ratio-(prop/(1/prop)))
lines(run[,1], ratio-(prop/(1/prop)), col=2)
lines(run[,1], (prop/(1/prop)), col=2)
(prop/(1/prop)
)
ratio
ratio
(1(1+1/ratio))
1/(1+1/ratio)
ratio[1:100]
f1
load("~/PhD/manuscripts/01_rates/00_revision/scripts/A/data/outros_het-993734-het.data")
nrow(outros)
load("~/PhD/manuscripts/01_rates/00_revision/scripts/A/data/outros_msm-312774-msm.data")
nrow(outros)
sin(90)
?rad
?sin
radians(90)
radian(90)
rad2deg <- function(rad) {(rad * 180) / (pi)}
deg2rad <- function(deg) {(deg * pi) / (180)}
#test:
rad2deg(pi) #180
rad2deg(2*pi) #360
deg2rad(180) #pi
deg2rad(90)
sin(deg2rad(90))
sin(deg2rad(35))
(130*6)/sin(deg2rad(35))
(130*6)/sin(deg2rad(35))/2
(130*6)/sin(deg2rad(80))/2
(130*6)/sin(deg2rad(25))/2
396 / ((pi*x)/4 )
396*4
923 *4
396/923
923/396
sqr(923/396)
sqrt(923/396)
library(installr)
install.packages("installr")
openplotmat()
elpos <- coordinates (c(1, 1, 2, 4, 4, 8, 8, 8, 8))
elpos[20,1] <- elpos[12,1]
elpos[28,1] <- elpos[12,1]
elpos[36,1] <- elpos[12,1]
elpos[43,1] <- (elpos[34,1]+elpos[36,1])/2
elpos[24,1] <- (elpos[23,1]+elpos[24,1])/2
straightarrow (from = elpos[1, ], to = elpos[2, ], lwd = 1, arr.pos = 0.5, arr.length = 0.3)
treearrow(from=elpos[2,], to=elpos[3:4,], lwd = 1, arr.pos = 0.25, arr.length = 0.3)
treearrow(from=elpos[4,], to=elpos[7:8,], lwd = 1, arr.pos = 0.1, arr.length = 0.3)
straightarrow(from = elpos[7, ], to = elpos[11, ], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from = elpos[8, ], to = elpos[12, ], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
treearrow(from=elpos[11,], to=elpos[c(25,18),], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
bentarrow(from=elpos[12,], to=elpos[20,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[12,], to=c(elpos[12,1]+0.12, elpos[12,2]), lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
straightarrow(from=elpos[20,], to=c(elpos[20,1]+0.12, elpos[20,2]), lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
straightarrow(from=elpos[28,], to=c(elpos[28,1]+0.12, elpos[28,2]), lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
segmentarrow(from=elpos[36,], to=elpos[1,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3, path="RVL", dd=0.12)
# bentarrow(from=elpos[18,], to=elpos[25,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VL", dd=0.1111111)
straightarrow(from=elpos[18,], to=elpos[26,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[26,], to=elpos[25,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[26,], to=elpos[34,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
bentarrow(from=elpos[20,], to=elpos[28,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="RVL")
straightarrow(from=elpos[25,], to=elpos[33,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
straightarrow(from=elpos[28,], to=elpos[36,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
bentarrow(from=elpos[34,], to=elpos[43,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VR")
bentarrow(from=elpos[36,], to=elpos[43,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VR")
bentarrow(from=elpos[3,], to=elpos[43,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VLL")
segmentarrow(from=elpos[33,], to=elpos[1,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3, dd=0.4)
straightarrow(from=elpos[25,], to=elpos[24,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[34,], to=elpos[33,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
textellipse(elpos[1,], radx=0.04, rady=0.025, lab = expression("I"[Res]), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[2,], radx=0.06, rady=0.04, lab = "seeking care?", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[3,], 0.06, 0.04,lab = expression("spontaneous recovery ("* nu *")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[4,], radx=0.06, rady=0.04, lab = "having symptoms?", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[7,], 0.06, 0.04, lab = expression("same-day treatment (" *zeta *"), fails;","returns after time "*delta*";"," overall rate "* paste(frac(1,(1/zeta + delta)))), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[8,], 0.06, 0.04, lab = expression("screening/PN with rate "* sigma *","," treatment after test with delay "*delta*";"," overall rate "* paste(frac(1,(1/sigma + delta)))), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[11,], radx=0.06, rady=0.04, lab = expression("NG detected? ("* xi[NG] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[12,], radx=0.06, rady=0.04, lab = expression("NG detected? ("* xi[NG] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[18,], radx=0.06, rady=0.04, lab = expression("Resistance detected? ("* xi[R] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[20,], radx=0.06, rady=0.04, lab = expression("Resistance detected? ("* xi[R] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[25,], radx=0.06, rady=0.04, lab = expression("remains","symptomatic ("* lambda[zeta] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[28,], radx=0.06, rady=0.04, lab = expression("returns for","treatment ("* lambda[sigma] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[34,], radx=0.06, rady=0.04, lab = expression("efficacious? ("*eta[B]*")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[36,], radx=0.06, rady=0.04, lab = expression("efficacious? ("*eta[B]*")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textellipse(elpos[24,], radx=0.04, rady=0.025, lab = "W", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textellipse(elpos[43,], radx=0.04, rady=0.025, lab = "S", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textplain(mid=(c(elpos[2,]+c(-0.125, -0.045))), height=0.1, lab="no")
textplain(mid=(c(elpos[2,]+c(+0.125, -0.045))), height=0.1, lab="yes")
textplain(mid=(c(elpos[4,]+c(-0.06125, -0.045))), height=0.1, lab="yes")
textplain(mid=(c(elpos[4,]+c(+0.06125, -0.045))), height=0.1, lab="no")
textplain(mid=(c(elpos[12,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[12,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[20,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[20,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[28,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[28,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[36,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[36,]+c(+0.01, -0.06))), height=0.1, lab="yes")
textplain(mid=(c(elpos[11,]+c(-0.025, -0.045))), height=0.1, lab="no")
textplain(mid=(c(elpos[11,]+c(+0.025, -0.045))), height=0.1, lab="yes")
textplain(mid=(c(elpos[26,]+c(-0.03, +0.01))), height=0.1, lab="yes")
textplain(mid=(c(elpos[26,]+c(+0.01, -0.05))), height=0.1, lab="no")
textplain(mid=(c(elpos[34,]+c(-0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[34,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[25,]+c(-0.10, +0.01))), height=0.1, lab="yes")
textplain(mid=(c(elpos[25,]+c(+0.01, -0.05))), height=0.1, lab="no")
library(diagram)
openplotmat()
elpos <- coordinates (c(1, 1, 2, 4, 4, 8, 8, 8, 8))
elpos[20,1] <- elpos[12,1]
elpos[28,1] <- elpos[12,1]
elpos[36,1] <- elpos[12,1]
elpos[43,1] <- (elpos[34,1]+elpos[36,1])/2
elpos[24,1] <- (elpos[23,1]+elpos[24,1])/2
straightarrow (from = elpos[1, ], to = elpos[2, ], lwd = 1, arr.pos = 0.5, arr.length = 0.3)
treearrow(from=elpos[2,], to=elpos[3:4,], lwd = 1, arr.pos = 0.25, arr.length = 0.3)
treearrow(from=elpos[4,], to=elpos[7:8,], lwd = 1, arr.pos = 0.1, arr.length = 0.3)
straightarrow(from = elpos[7, ], to = elpos[11, ], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from = elpos[8, ], to = elpos[12, ], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
treearrow(from=elpos[11,], to=elpos[c(25,18),], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
bentarrow(from=elpos[12,], to=elpos[20,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[12,], to=c(elpos[12,1]+0.12, elpos[12,2]), lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
straightarrow(from=elpos[20,], to=c(elpos[20,1]+0.12, elpos[20,2]), lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
straightarrow(from=elpos[28,], to=c(elpos[28,1]+0.12, elpos[28,2]), lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
segmentarrow(from=elpos[36,], to=elpos[1,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3, path="RVL", dd=0.12)
# bentarrow(from=elpos[18,], to=elpos[25,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VL", dd=0.1111111)
straightarrow(from=elpos[18,], to=elpos[26,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[26,], to=elpos[25,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[26,], to=elpos[34,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
bentarrow(from=elpos[20,], to=elpos[28,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="RVL")
straightarrow(from=elpos[25,], to=elpos[33,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
straightarrow(from=elpos[28,], to=elpos[36,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
bentarrow(from=elpos[34,], to=elpos[43,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VR")
bentarrow(from=elpos[36,], to=elpos[43,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VR")
bentarrow(from=elpos[3,], to=elpos[43,], lwd = 1, arr.pos = 0.6, arr.length = 0.3, path="VLL")
segmentarrow(from=elpos[33,], to=elpos[1,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3, dd=0.4)
straightarrow(from=elpos[25,], to=elpos[24,], lwd = 1, arr.pos = 0.6, arr.length = 0.3)
straightarrow(from=elpos[34,], to=elpos[33,], lwd = 1, arr.pos = 0.6, lty="dashed", arr.length = 0.3)
textellipse(elpos[1,], radx=0.04, rady=0.025, lab = expression("I"[Res]), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[2,], radx=0.06, rady=0.04, lab = "seeking care?", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[3,], 0.06, 0.04,lab = expression("spontaneous recovery ("* nu *")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[4,], radx=0.06, rady=0.04, lab = "having symptoms?", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[7,], 0.06, 0.04, lab = expression("same-day treatment (" *zeta *"), fails;","returns after time "*delta*";"," overall rate "* paste(frac(1,(1/zeta + delta)))), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[8,], 0.06, 0.04, lab = expression("screening/PN with rate "* sigma *","," treatment after test with delay "*delta*";"," overall rate "* paste(frac(1,(1/sigma + delta)))), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[11,], radx=0.06, rady=0.04, lab = expression("NG detected? ("* xi[NG] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[12,], radx=0.06, rady=0.04, lab = expression("NG detected? ("* xi[NG] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[18,], radx=0.06, rady=0.04, lab = expression("Resistance detected? ("* xi[R] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[20,], radx=0.06, rady=0.04, lab = expression("Resistance detected? ("* xi[R] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[25,], radx=0.06, rady=0.04, lab = expression("remains","symptomatic ("* lambda[zeta] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[28,], radx=0.06, rady=0.04, lab = expression("returns for","treatment ("* lambda[sigma] * ")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[34,], radx=0.06, rady=0.04, lab = expression("efficacious? ("*eta[B]*")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textdiamond(elpos[36,], radx=0.06, rady=0.04, lab = expression("efficacious? ("*eta[B]*")"), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textellipse(elpos[24,], radx=0.04, rady=0.025, lab = "W", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textellipse(elpos[43,], radx=0.04, rady=0.025, lab = "S", box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textplain(mid=(c(elpos[2,]+c(-0.125, -0.045))), height=0.1, lab="no")
textplain(mid=(c(elpos[2,]+c(+0.125, -0.045))), height=0.1, lab="yes")
textplain(mid=(c(elpos[4,]+c(-0.06125, -0.045))), height=0.1, lab="yes")
textplain(mid=(c(elpos[4,]+c(+0.06125, -0.045))), height=0.1, lab="no")
textplain(mid=(c(elpos[12,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[12,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[20,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[20,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[28,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[28,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[36,]+c(+0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[36,]+c(+0.01, -0.06))), height=0.1, lab="yes")
textplain(mid=(c(elpos[11,]+c(-0.025, -0.045))), height=0.1, lab="no")
textplain(mid=(c(elpos[11,]+c(+0.025, -0.045))), height=0.1, lab="yes")
textplain(mid=(c(elpos[26,]+c(-0.03, +0.01))), height=0.1, lab="yes")
textplain(mid=(c(elpos[26,]+c(+0.01, -0.05))), height=0.1, lab="no")
textplain(mid=(c(elpos[34,]+c(-0.10, +0.01))), height=0.1, lab="no")
textplain(mid=(c(elpos[34,]+c(+0.01, -0.05))), height=0.1, lab="yes")
textplain(mid=(c(elpos[25,]+c(-0.10, +0.01))), height=0.1, lab="yes")
textplain(mid=(c(elpos[25,]+c(+0.01, -0.05))), height=0.1, lab="no")
z <- 0
tolower("A SECOND CASE OF GONORRHOEAL SEPTICAEMIA AND ULCERATIVE ENDOCARDITIS WITH OBSERVATIONS UPON THE CARDIAC COMPLICATIONS OF GONORRHOEA.")
?confint
?binom
?rbinom
dbinom(c(0.025, 0.975), 1000, 0.05)
qbinom(c(0.025, 0.975), 1000, 0.05)
tolower("Update to CDC's Sexually Transmitted Diseases Treatment Guidelines, 2010: Oral Cephalosporins no longer a Recommended Treatment for Gonococcal Infections")
setwd("~/PhD/ng_poc/repository/scripts/")
library(reshape2)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(gtable)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dvec <- c(1/365, 7/365)
psivec <- c(0.3, 0.6, 0.9)
lsvec <- c(0.3, 0.6, 0.9)
xirvec <- c(0, 0.25, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99)
df <- c()
df9 <- c()
df10 <- c()
pn <- 197
for(pop in c("msm", "het")){
if(pop=="msm"){
popname <- "MSM"
}else{
popname <- "HMW"
}
load(paste("../data/Fig4+5/fr_", pop, "_", pn, ".data", sep=""))
for(d in 2){
ed8 <- fr
ed8[ed8==Inf] <- NA
ed8[ed8==-Inf] <- NA
a1 <- array(dim=dim(ed8[4,d,,,,]))
for(i in 1:8){
a1[,,i,] <- ed8[2,d,,,8,]
}
ned8 <- (ed8[4,d,,,,])/a1
med8 <- apply(ned8, c(1,2,3), function(x) median(x))
med8 <- melt(med8)
led8 <- cbind(med8, popname, "CULT")
names(led8) <- c( "psi", "lambda_sigma", "xi_r", "rrd", "pop", "test") # rrd = relative rate difference
ed7 <- fr
ed7[ed7==Inf] <- NA
ed7[ed7==-Inf] <- NA
a5 <- array(dim=dim(ed7[4,d,,,,]))
for(i in 1:8){
a5[,,i,] <- ed7[3,d,,,7,]
}
ned7 <- (ed7[4,d,,,,])/a5
med7 <- apply(ned7, c(1,2,3), function(x) median(x))
med7 <- melt(med7)
led7 <- cbind(med7, popname, "NAAT")
names(led7) <- c( "psi", "lambda_sigma", "xi_r", "rrd", "pop", "test") # rrd = relative rate difference
df <- rbind(df, led8, led7)
}
}
df[,1] <- as.factor(df[,1])
levels(df[,1]) <- paste("fraction treated that is symptomatic: ", as.character(psivec*100), " %", sep="")
df[,2] <- as.factor(df[,2])
levels(df[,2]) <- paste("fraction asymptomatic patients followed up: ", as.character(lsvec*100), " %", sep="")
for(i in 1:length(xirvec)){
df[which(df[,3]==i),3] <- xirvec[i]*100
}
pcult <- ggplot(df[which(df$test=="CULT"),], aes(x=xi_r, y=rrd))+
geom_ribbon(aes(ymin=min(rrd, na.rm=T), ymax=1), fill = cbPalette[5], alpha=0.2)+
theme_hc()+
geom_point(aes(col=psi, shape=psi), size=2.5)+
geom_line(aes(col=psi, linetype=lambda_sigma), size=0.7)+
xlab(expression("POC test sensitivity to detect resistance ("*xi["R, POC"]*" in %)"))+
ylab("ratio of resistance spread between POC and culture")+
scale_colour_manual(values=cbPalette[c(1,3,8)], name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_shape_discrete(name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_linetype_discrete(name  =expression("fraction of asymptomatic individuals who return for treatment at baseline ("*lambda["A, baseline"]*" in %)"),
labels=c(as.character(lsvec*100)))+
scale_y_log10(breaks=c(1,10,100))+
theme(strip.background = element_rect(fill = "white"))+
theme(legend.box="vertical",
panel.spacing = (unit(0.5, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
#         axis.text.x=element_blank(),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.title.x=element_text(margin=margin(10,0,30,0)),
axis.text=element_text(colour="black")
)
pnaat <- ggplot(df[which(df$test=="NAAT"),], aes(x=xi_r, y=rrd))+
geom_ribbon(aes(ymin=min(rrd, na.rm=T), ymax=1), fill = cbPalette[5], alpha=0.2)+
theme_hc()+
geom_point(aes(col=psi, shape=psi), size=2.5)+
geom_line(aes(col=psi, linetype=lambda_sigma), size=0.7)+
xlab(expression("POC test sensitivity to detect resistance ("*xi["R, POC"]*" in %)"))+
ylab("ratio of resistance spread between POC and NAAT")+
scale_colour_manual(values=cbPalette[c(1,3,8)], name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_shape_discrete(name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_linetype_discrete(name  =expression("fraction of asymptomatic individuals who return for treatment at baseline ("*lambda["A, baseline"]*" in %)"),
labels=c(as.character(lsvec*100)))+
theme(strip.background = element_rect(fill = "white"))+
theme(legend.box="vertical",
panel.spacing = (unit(0.5, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.title.x=element_text(margin=margin(10,0,30,0)),
axis.text=element_text(colour="black")
)
pdf("../figures/Fig4_tmp.pdf", colormodel="cmyk", width=15, height=8)
pcult + facet_wrap(~ pop)+
theme(panel.spacing = unit(2, "cm"))+
theme(text=element_text(size=18))
dev.off()
pdf("../figures/Fig5_tmp.pdf", colormodel="cmyk", width=15, height=8)
pnaat + facet_wrap(~ pop)+
theme(panel.spacing = unit(2, "cm"))+
theme(text=element_text(size=18))
dev.off()
library(diagram)
pdf("../figures/FigS1_tmp.pdf", width=7, height=7)
openplotmat()
elpos <- coordinates (c(2, 2, 2))
## migration arrows
# from I_sen
curvedarrow(from=elpos[2,]+c(0, 0.025), to=c(1, elpos[2,2]+0.05), curve= 0.05, segment=c(0.37,0.87), lwd=1, arr.pos=0.87, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[2,]+c(0,-0.025), to=c(1, elpos[2,2]-0.05), curve=-0.05, segment=c(0.37,0.87), lwd=1, arr.pos=0.87, arr.type="triangle", arr.length=0.2)
# from I_Res
curvedarrow(from=elpos[6,]+c(0, 0.025), to=c(1, elpos[6,2]+0.05), curve= 0.05, segment=c(0.37,0.87), lwd=1, arr.pos=0.87, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[6,]+c(0,-0.025), to=c(1, elpos[6,2]-0.05), curve=-0.05, segment=c(0.37,0.87), lwd=1, arr.pos=0.87, arr.type="triangle", arr.length=0.2)
# from I_W
curvedarrow(from=elpos[4,]+c(0, 0.025), to=c(1, elpos[4,2]+0.05), curve= 0.05, segment=c(0.37,0.87), lwd=1, arr.pos=0.87, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[4,]+c(0,-0.025), to=c(1, elpos[4,2]-0.05), curve=-0.05, segment=c(0.37,0.87), lwd=1, arr.pos=0.87, arr.type="triangle", arr.length=0.2)
# from S
curvedarrow(from=elpos[3,]+c(0,0.025), to=c(0, elpos[3,2]+0.3), curve=-0.05, segment=c(0.29,0.83), lwd=1, arr.pos=0.83, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[3,]+c(0,-0.025), to=c(0, elpos[3,2]-0.3), curve=0.05, segment=c(0.29,0.83), lwd=1, arr.pos=0.83, arr.type="triangle", arr.length=0.2)
# to S
curvedarrow(from=c(0, elpos[3,2]-0.05), to=elpos[3,]+c(0,-0.025), curve=-0.05, segment=c(0.13,0.6), lwd=1, arr.pos=0.6, arr.type="triangle", arr.length=0.2)
curvedarrow(from=c(0, elpos[3,2]+0.05), to=elpos[3,]+c(0,0.025), curve=0.05, segment=c(0.13,0.6), lwd=1, arr.pos=0.6, arr.type="triangle", arr.length=0.2)
# to I_Sen
curvedarrow(from=c(1, elpos[2,2]+((elpos[2,2]+elpos[4,2])/2-elpos[4,2])), to=elpos[2,], curve=+0.05, segment=c(0.15,0.6), lwd=1, arr.pos=0.6, arr.type="triangle", arr.length=0.2)
# to I_Res
curvedarrow(from=c(1, elpos[6,2]-((elpos[2,2]+elpos[4,2])/2-elpos[4,2])), to=elpos[6,], curve=-0.05, segment=c(0.15,0.6), lwd=1, arr.pos=0.6, arr.type="triangle", arr.length=0.2)
# to I_W
curvedarrow(from=c(1, (elpos[2,2]+elpos[4,2])/2), to=elpos[4,], curve=+0.05, segment=c(0.15,0.6), lwd=1, arr.pos=0.6, arr.type="triangle", arr.length=0.2)
## compartment change arrows
# arrows to/from I_Sen
curvedarrow(from=elpos[3,], to=elpos[2,], curve=-0.05, segment=c(0.25,0.745), lwd=1, arr.pos=0.745, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[2,], to=elpos[3,], curve=0.2, segment=c(0.2,0.825), lwd=1, arr.pos=0.825, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[2,], to=elpos[3,], curve=0.35, segment=c(0.16,0.875), lwd=1, arr.pos=0.875, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[2,], to=elpos[3,], curve=0.5, segment=c(0.13,0.91), lwd=1, arr.pos=0.91, arr.type="triangle", arr.length=0.2)
# arrows from W
curvedarrow(from=elpos[4,]+c(0, 0.005), to=elpos[3,]+c(0, 0.005),  curve=0.05, segment=c(0.26,0.72), lwd=1, arr.pos=0.72, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[4,]+c(0, -0.005), to=elpos[3,]+c(0, -0.005),  curve=-0.05, segment=c(0.26,0.72), lwd=1, arr.pos=0.72, arr.type="triangle", arr.length=0.2)
# arrows to/from I_Res
curvedarrow(from=elpos[3,], to=elpos[6,], curve=0.05, segment=c(0.25, 0.745), lwd=1, arr.pos=0.745, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[6,], to=elpos[3,], curve=-0.2, segment=c(0.2,0.825), lwd=1, arr.pos=0.825, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[6,], to=elpos[3,], curve=-0.35, segment=c(0.16,0.875), lwd=1, arr.pos=0.875, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[6,], to=elpos[3,], curve=-0.5, segment=c(0.13,0.91), lwd=1, arr.pos=0.91, arr.type="triangle", arr.length=0.2)
# arrows between W and I_Res
curvedarrow(from=elpos[4,], to=elpos[6,], curve=0.25, segment=c(0.32,0.67), lwd=1, arr.pos=0.67, arr.type="triangle", arr.length=0.2)
curvedarrow(from=elpos[6,], to=elpos[4,], curve=0.25, segment=c(0.32,0.67), lwd=1, arr.pos=0.67, arr.type="triangle", arr.length=0.2)
# compartments
textrect(elpos[2,], 0.06, 0.04,lab = expression("I"[Sen[i]]), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[3,], 0.06, 0.04,lab = expression("S"[i]), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[4,], 0.06, 0.04,lab = expression("W"[i]), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
textrect(elpos[6,], 0.06, 0.04,lab = expression("I"[Res[i]]), box.col = "white", shadow.col = "none", shadow.size = 0.0, cex = 1.2)
# infection terms
textempty(c(0.45, (elpos[3,2]+elpos[5,2])/2), cex=0.8, lab=expression(pi[i]*Sigma[j%in%C]*rho[ij]*beta[ij]*frac(I[Res[j]]+W[j], N[j]))) # resistant
textempty(c(0.45, (elpos[3,2]+elpos[2,2])/2), cex=0.8, lab=expression(pi[i]*Sigma[j%in%C]*rho[ij]*beta[ij]*frac(I[Sen[j]], N[j]))) # sensitive
# spontaneous recovery terms
textempty(c(0.433, (elpos[3,2]+elpos[5,2])/2-0.1), cex=0.8, lab=expression( nu )) # resistant
textempty(c(0.433, (elpos[3,2]+elpos[2,2])/2+0.1), cex=0.8, lab=expression(nu)) # sensitive
textempty(c((elpos[3,1]+elpos[4,1])/2, (elpos[3,2]+elpos[4,2])/2+0.03), cex=0.8, lab=expression(nu)) #
# treatment with symptoms terms
textempty(c(0.417, (elpos[3,2]+elpos[5,2])/2-0.19), cex=0.8, lab=expression(frac(1, frac(1, tau[S]) + delta) * xi[G]*xi[R]*eta[2])) # resistant
textempty(c(0.417, (elpos[3,2]+elpos[2,2])/2+0.19), cex=0.8, lab=expression(tau[S]*eta[1])) # sensitive
# treatment without symptoms terms
textempty(c(0.4, (elpos[3,2]+elpos[5,2])/2-0.28), cex=0.8, lab=expression(frac(1, frac(1, tau[A]) + delta)* xi[G]*xi[R]*lambda[A]*eta[2])) # resistant
textempty(c(0.4, (elpos[3,2]+elpos[2,2])/2+0.28), cex=0.8, lab=expression(frac(1, frac(1, tau[A]) + delta)* xi[G]*lambda[A]*eta[1])) # sensitive
# treatment after waiting
textempty(c((elpos[3,1]+elpos[4,1])/2, (elpos[3,2]+elpos[4,2])/2-0.03), cex=0.8, lab=expression(omega*eta[2]))
# unsuccessful treatment after waiting
textempty(c(elpos[4,1]-0.11, (elpos[4,2]+elpos[6,2])/2), cex=0.8, lab=expression(omega*"("*1-eta[2]*")"))
# moving from I[Res] to W
textempty(c(elpos[4,1]+0.11, (elpos[4,2]+elpos[6,2])/2), cex=0.8, lab=expression(frac(1, frac(1, tau[S]) + delta) * lambda[S] * "("*xi[G] * "("*1-xi[R]*")" *"+"* "("*1-xi[G]*")"*")"))
# migration in
textempty(c(elpos[3,1]-0.15, elpos[3,2]+0.03), cex=0.8, lab=expression(alpha*N[i]))
# migration out
textempty(c(elpos[3,1]-0.153, (elpos[3,2]+elpos[5,2])/2), cex=0.8, lab=expression(alpha))
textempty(c((elpos[4,1]+1)/2, elpos[4,2]-0.025), cex=0.8, lab=expression(alpha))
textempty(c((elpos[2,1]+1)/2, elpos[2,2]-0.025), cex=0.8, lab=expression(alpha))
textempty(c((elpos[6,1]+1)/2, elpos[6,2]-0.025), cex=0.8, lab=expression(alpha))
# redistribution in
textempty(c(elpos[3,1]-0.15, elpos[3,2]-0.03), cex=0.8, lab=expression(gamma*N[i]*Sigma[j%in%C]*S[j]))
textempty(c(elpos[6,1]+0.15, elpos[6,2]-0.12), cex=0.8, lab=expression(gamma*N[i]*Sigma[j%in%C]*I[Res[j]]))
textempty(c(elpos[2,1]+0.15, elpos[2,2]+0.12), cex=0.8, lab=expression(gamma*N[i]*Sigma[j%in%C]*I[Sen[j]]))
textempty(c(elpos[4,1]+0.15, elpos[4,2]+0.12), cex=0.8, lab=expression(gamma*N[i]*Sigma[j%in%C]*W[j]))
# redistribution out
textempty(c(elpos[3,1]-0.153, (elpos[3,2]+elpos[2,2])/2), cex=0.8, lab=expression(gamma))
textempty(c((elpos[4,1]+1)/2, elpos[4,2]+0.025), cex=0.8, lab=expression(gamma))
textempty(c((elpos[6,1]+1)/2, elpos[6,2]+0.025), cex=0.8, lab=expression(gamma))
textempty(c((elpos[2,1]+1)/2, elpos[2,2]+0.025), cex=0.8, lab=expression(gamma))
dev.off()
