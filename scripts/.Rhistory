bg.col <- "white"
# plot timelines
timeline <- function(df.tl, maxtime, title, xlab, ylab, col.het, col.msm){
df.tl <- df.tl[which(df.tl[,1]<=maxtime),]
ggplot(df.tl, aes(x=times)) +
geom_line(aes(x=times, y=0.05*100), linetype="dashed", colour="grey", size=0.75) +
theme_hc() +
theme(text = element_text(
size = 12,
colour="black"),
plot.margin = unit(c(0,0,0,0), "pt"),
panel.background = element_rect(colour=bg.col, fill=bg.col),
plot.background = element_rect(colour=bg.col, fill=bg.col),
axis.ticks = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(colour="darkgrey"),
strip.background = element_rect(colour=bg.col, fill=bg.col),
legend.position ="bottom",
legend.direction = "horizontal",
legend.background = element_rect(colour=bg.col, fill=bg.col),
axis.text = element_text(colour="black")) +
geom_line(aes(y=median*100, colour=group), alpha=1, size=1) + # plot median
geom_ribbon(aes(ymin=low50*100, ymax=up50*100, fill=group), alpha=0.45) + # plot 50% area
geom_ribbon(aes(ymin=low95*100, ymax=up95*100,fill=group), alpha=0.35) + # plot 95% area
scale_colour_manual(values=c(col.het,col.msm), labels=c("HMW", "MSM"), guide=guide_legend(title="", reverse=T)) + # set colours in legend
scale_fill_manual(values=c(col.het,col.msm), labels=c("HMW", "MSM"), guide=guide_legend(title="", reverse=T)) + # set fill (colours) in legend
labs(title=title,
x=xlab,
y=ylab)+ylim(0,100)+
theme(
panel.spacing = (unit(0.5, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
axis.title.y=element_text(margin=margin(0,0,0,0)),
axis.title.x=element_text(margin=margin(10,0,30,0)),
axis.text=element_text(colour="black")
)
}
pres.all <- which(df$measurement=="pres" & df!=1)
dfstemp <- df[pres.all,]
dfstemp$scenario <- factor(dfstemp$scenario, levels=c(2,3,5,4))
levels(dfstemp$scenario) <- c("culture", "NAAT", "POC-R", "POC+R")
temp.ppres <- timeline(dfstemp, maxtime=30, title="",
xlab=expression("years after resistant gonorrhoea introduced"),
ylab=expression(atop("proportion resistant gonorrhoea (in %)")),
col.het, col.msm)
pdf(paste("../figures/FigS12_tmp.pdf", sep=""), width=10, height=10, colormodel = "cmyk")
temp.ppres + facet_wrap(~scenario, ncol=1)
dev.off()
# printing proportion resistant after 30 years
df[which(df$times==30 & df$measurement=="pres" & df$scenario==2),c(2, 8, 9, 10)]
# Culture MSM
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==2 & df$group=="msm"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==2 & df$group=="msm"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==2 & df$group=="msm"),"up50"]*100, 2))
# Culture HMW
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==2 & df$group=="het"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==2 & df$group=="het"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==2 & df$group=="het"),"up50"]*100, 2))
df[which(df$times==30 & df$measurement=="pres" & df$scenario==4),c(2, 8, 9, 10)]
# POC+R MSM
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==4 & df$group=="msm"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==4 & df$group=="msm"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==4 & df$group=="msm"),"up50"]*100, 2))
# POC+R HMW
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==4 & df$group=="het"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==4 & df$group=="het"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==4 & df$group=="het"),"up50"]*100, 2))
df[which(df$times==30 & df$measurement=="pres" & df$scenario==3),c(2, 8, 9, 10)]
# NAAT MSM
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==3 & df$group=="msm"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==3 & df$group=="msm"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==3 & df$group=="msm"),"up50"]*100, 2))
# NAAT HMW
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==3 & df$group=="het"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==3 & df$group=="het"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==3 & df$group=="het"),"up50"]*100, 2))
df[which(df$times==30 & df$measurement=="pres" & df$scenario==5),c(2, 8, 9, 10)]
# POC-R MSM
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==5 & df$group=="msm"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==5 & df$group=="msm"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==5 & df$group=="msm"),"up50"]*100, 2))
# POC-R HMW
c(round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==5 & df$group=="het"),"median"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==5 & df$group=="het"),"low50"]*100, 2),
round(df[which(df$times==30 & df$measurement=="pres" & df$scenario==5 & df$group=="het"),"up50"]*100, 2))
# printing time until 5% first exceeded
# culture MSM
c(round(df[which(df$median>0.05 & df$measurement=="pres" & df$scenario==2 &df$group=="msm")[1],1],2),
round(df[which(df$up50>0.05 & df$measurement=="pres" & df$scenario==2 &df$group=="msm")[1],1],2),
round(df[which(df$low50>0.05 & df$measurement=="pres" & df$scenario==2 &df$group=="msm")[1],1],2))
# culture HMW
c(round(df[which(df$median>0.05 & df$measurement=="pres" & df$scenario==2 &df$group=="het")[1],1],2),
round(df[which(df$up50>0.05 & df$measurement=="pres" & df$scenario==2 &df$group=="het")[1],1],2),
round(df[which(df$low50>0.05 & df$measurement=="pres" & df$scenario==2 &df$group=="het")[1],1],2))
# POC-R MSM
c(round(df[which(df$median>0.05 & df$measurement=="pres" & df$scenario==5 &df$group=="msm")[1],1],2),
round(df[which(df$up50>0.05 & df$measurement=="pres" & df$scenario==5 &df$group=="msm")[1],1],2),
round(df[which(df$low50>0.05 & df$measurement=="pres" & df$scenario==5 &df$group=="msm")[1],1],2))
# POC-R HMW
c(round(df[which(df$median>0.05 & df$measurement=="pres" & df$scenario==5 &df$group=="het")[1],1],2),
round(df[which(df$up50>0.05 & df$measurement=="pres" & df$scenario==5 &df$group=="het")[1],1],2),
round(df[which(df$low50>0.05 & df$measurement=="pres" & df$scenario==5 &df$group=="het")[1],1],2))
# NAAT MSM
c(round(df[which(df$median>0.05 & df$measurement=="pres" & df$scenario==3 &df$group=="msm")[1],1],2),
round(df[which(df$up50>0.05 & df$measurement=="pres" & df$scenario==3 &df$group=="msm")[1],1],2),
round(df[which(df$low50>0.05 & df$measurement=="pres" & df$scenario==3 &df$group=="msm")[1],1],2))
# NAAT HMW
c(round(df[which(df$median>0.05 & df$measurement=="pres" & df$scenario==3 &df$group=="het")[1],1],2),
round(df[which(df$up50>0.05 & df$measurement=="pres" & df$scenario==3 &df$group=="het")[1],1],2),
round(df[which(df$low50>0.05 & df$measurement=="pres" & df$scenario==3 &df$group=="het")[1],1],2))
setwd("~/PhD/ng_poc/repository/scripts/")
library(ggplot2)
library(ggthemes)
library(grid)
library(gridExtra)
library(cowplot)
# make single data frame AND multiply by 100 000 (for averted cases per 100 000)
theme_set(theme_bw())
obscasesAverted <- data.frame()
for (pop in c("msm", "het")){
for (pn in 198){
source(paste("pn_", pn, ".R", sep=""))
psi <- psi.het
load(paste("../data/FigS13/12_naat-obscasesAverted_", pop, "_", pn,".data", sep=""))
obscasesAverted <- as.data.frame(rbind(obscasesAverted, cbind(naat.obscasesAverted[2,5,]*100000, "POC+R", pop, eff.lambda_sigma, psi)))
}
}
for (pop in c("msm", "het")){
for (pn in 200){
source(paste("pn_", pn, ".R", sep=""))
psi <- psi.het
load(paste("../data/FigS13/12_naat-obscasesAverted_", pop, "_", pn,".data", sep=""))
obscasesAverted <- as.data.frame(rbind(obscasesAverted, cbind(naat.obscasesAverted[2,5,]*100000, "POC-R", pop, eff.lambda_sigma, psi)))
}
}
for (pop in c("msm", "het")){
for (pn in 199){
source(paste("pn_", pn, ".R", sep=""))
psi <- psi.het
load(paste("../data/FigS13/12_naat-obscasesAverted_", pop, "_", pn,".data", sep=""))
obscasesAverted <- as.data.frame(rbind(obscasesAverted, cbind(naat.obscasesAverted[1,5,]*100000, "culture", pop, eff.lambda_sigma, psi)))
}
}
names(obscasesAverted) <- c("outcome", "scenario", "pop", "lambda_sigma", "psi")
obscasesAverted$outcome <- as.numeric(as.character(obscasesAverted$outcome))
(lev.ls <- as.numeric(levels(obscasesAverted$lambda_sigma))*100)
(lev.p <- as.numeric(levels(obscasesAverted$psi))*100)
pl <- list()
ywhiskers <- rbind(c(Inf, -Inf),c(Inf, -Inf))
outcome.stats <- array(dim=c(2,3,3,3,5))
outcome.stats2 <- array(dim=c(2,3,3,3,3))
outcome.median <- array(dim=c(2,3,3,3))
outcome.median2 <- array(dim=c(2,3,3,3))
outcome.mean <- array(dim=c(2,3,3,3))
for (pop in c("msm", "het")){
if(pop=="msm"){
bg.col <- "white"
title <- "MSM"
i <- 1
scale1 <- scale_colour_manual(guide_legend(title=""), values=c("dodgerblue4", "dodgerblue3", "deepskyblue")) # set colours and label names in legend
scale2 <- scale_fill_manual(guide_legend(title=""), values=c("dodgerblue4", "dodgerblue3", "deepskyblue")) # set fill (colours) and label names in legend
}else if(pop=="het"){
bg.col <- "white"
title <- "HMW"
i <- 2
scale1 <- scale_colour_manual(guide_legend(title=""), values=c("darkolivegreen4", "darkolivegreen3", "darkolivegreen2")) # set colours and label names in legend
scale2 <- scale_fill_manual(guide_legend(title=""), values=c("darkolivegreen4", "darkolivegreen3", "darkolivegreen2")) # set fill (colours) and label names in legend
}else{
print("Problem with loop.")
}
ind <- which(obscasesAverted$pop==pop)
bp <- ggplot(obscasesAverted[ind,], mapping=aes_string(y = "outcome", x = "scenario"))+
geom_boxplot(outlier.shape=NA, aes_string(colour="scenario", fill="scenario")) +
stat_summary(geom = "crossbar", width=0.65, fatten=0, color="white", fun.data = function(x){ return(c(y=median(x), ymin=median(x), ymax=median(x))) })+
theme_hc() +
theme(
text= element_text(size=14),
panel.spacing = (unit(1, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
axis.title.y=element_text(margin=margin(0,10,0,0)),
strip.text=element_text(size = 12),
legend.position="none"
)+
scale1+
scale2+
labs(x="", y="observed cases averted after 5 years\ncompared with NAAT (per 100 000 persons)", title=title)+
theme(
panel.spacing = (unit(0.5, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.title.x=element_text(margin=margin(10,0,0,0)),
axis.text=element_text(colour="black"),
plot.title = element_text(hjust = 0.5)
)
pl[[i]] <- bp
# scale y-axis to exclude outliers (http://stackoverflow.com/questions/5677885/ignore-outliers-in-ggplot2-boxplot)
# compute lower and upper whiskers
isi <- 0
for (is in levels(obscasesAverted[ind,]$scenario)){
isel <- which(obscasesAverted$pop==pop & obscasesAverted$scenario==is)
isi <- isi + 1
ipi <- 0
for(ip in levels(obscasesAverted[ind,]$psi)){
ipi <- ipi + 1
ili <- 0
for(il in levels(obscasesAverted[ind,]$lambda_sigma)){
ili <- ili + 1
j <- which(obscasesAverted[isel,]$psi==ip & obscasesAverted[isel,]$lambda_sigma==il)
outcome.stats[i, isi, ipi, ili,] <- boxplot.stats(obscasesAverted[isel,][j,]$outcome)$stats
outcome.stats2[i, isi, ipi, ili,] <- quantile((obscasesAverted[isel,][j,]$outcome), c(0.25, 0.5, 0.75))
outcome.median[i, isi, ipi, ili] <- boxplot.stats(obscasesAverted[isel,][j,]$outcome)$stats[3]
outcome.median2[i, isi, ipi, ili] <- median(obscasesAverted[isel,][j,]$outcome)
outcome.mean[i, isi, ipi, ili] <- mean(obscasesAverted[isel,][j,]$outcome)
whisk.temp <- boxplot.stats(obscasesAverted[isel,][j,]$outcome)$stats[c(1, 5)]
if(whisk.temp[1]<ywhiskers[i,1]) ywhiskers[i,1] <- whisk.temp[1]
if(whisk.temp[2]>ywhiskers[i,2]) ywhiskers[i,2] <- whisk.temp[2]
}
}
}
# scale y limits based on whiskers (for two non-negative ywhisker values)
pl[[i]] <- pl[[i]] + coord_cartesian(ylim = ywhiskers[i,]*c(0.95, 1.05))
}
print(plot_grid(pl[[1]], pl[[2]], labels=c("A", "B"), ncol = 2, nrow = 1))
ggsave(paste("../figures/FigS13_tmp.pdf", sep=""), colormodel="cmyk", width=14, height=7)
# i, isi, ipi, ili
# pop, scenario, psi, lambda_a
# msm/het (1/2), POC+R/POC-R/culture, 30%/60%/90%, 30%/60%/90%,
# baseline: [,,2,3]
round(outcome.median[1,1,2,3]) # msm POC+R
round(outcome.median[1,2,2,3]) # msm POC-R
round(outcome.median[1,3,2,3]) # msm culture
round(outcome.median[2,1,2,3]) # het POC+R
round(outcome.median[2,2,2,3]) # het POC-R
round(outcome.median[2,3,2,3]) # het culture
# i, isi, ipi, ili
# pop, scenario, psi, lambda_a
# msm/het (1/2), POC+R/POC-R/culture, 30%/60%/90%, 30%/60%/90%,
# baseline: [,,2,3]
round(outcome.stats2[1,1,2,3,]) # msm POC+R
round(outcome.stats2[1,2,2,3,]) # msm POC-R
round(outcome.stats2[1,3,2,3,]) # msm culture
round(outcome.stats2[2,1,2,3,]) # het POC+R
round(outcome.stats2[2,2,2,3,]) # het POC-R
round(outcome.stats2[2,3,2,3,]) # het culture
setwd("~/PhD/ng_poc/repository/scripts/")
library(ggplot2)
library(ggthemes)
library(grid)
library(gridExtra)
library(cowplot)
# make single data frame AND multiply by 100 000 (for averted cases per 100 000)
theme_set(theme_bw())
obscasesAverted <- data.frame()
for (pop in c("msm", "het")){
for (pn in 198){
source(paste("pn_", pn, ".R", sep=""))
psi <- psi.het
load(paste("../data/FigS13/12_naat-obscasesAverted_", pop, "_", pn,".data", sep=""))
obscasesAverted <- as.data.frame(rbind(obscasesAverted, cbind(naat.obscasesAverted[2,5,]*100000, "POC+R", pop, eff.lambda_sigma, psi)))
}
}
for (pop in c("msm", "het")){
for (pn in 200){
source(paste("pn_", pn, ".R", sep=""))
psi <- psi.het
load(paste("../data/FigS13/12_naat-obscasesAverted_", pop, "_", pn,".data", sep=""))
obscasesAverted <- as.data.frame(rbind(obscasesAverted, cbind(naat.obscasesAverted[2,5,]*100000, "POC-R", pop, eff.lambda_sigma, psi)))
}
}
for (pop in c("msm", "het")){
for (pn in 199){
source(paste("pn_", pn, ".R", sep=""))
psi <- psi.het
load(paste("../data/FigS13/12_naat-obscasesAverted_", pop, "_", pn,".data", sep=""))
obscasesAverted <- as.data.frame(rbind(obscasesAverted, cbind(naat.obscasesAverted[1,5,]*100000, "culture", pop, eff.lambda_sigma, psi)))
}
}
names(obscasesAverted) <- c("outcome", "scenario", "pop", "lambda_sigma", "psi")
obscasesAverted$outcome <- as.numeric(as.character(obscasesAverted$outcome))
(lev.ls <- as.numeric(levels(obscasesAverted$lambda_sigma))*100)
(lev.p <- as.numeric(levels(obscasesAverted$psi))*100)
pl <- list()
ywhiskers <- rbind(c(Inf, -Inf),c(Inf, -Inf))
outcome.stats <- array(dim=c(2,3,3,3,5))
outcome.stats2 <- array(dim=c(2,3,3,3,3))
outcome.median <- array(dim=c(2,3,3,3))
outcome.median2 <- array(dim=c(2,3,3,3))
outcome.mean <- array(dim=c(2,3,3,3))
for (pop in c("msm", "het")){
if(pop=="msm"){
bg.col <- "white"
title <- "MSM"
i <- 1
scale1 <- scale_colour_manual(guide_legend(title=""), values=c("dodgerblue4", "dodgerblue3", "deepskyblue")) # set colours and label names in legend
scale2 <- scale_fill_manual(guide_legend(title=""), values=c("dodgerblue4", "dodgerblue3", "deepskyblue")) # set fill (colours) and label names in legend
}else if(pop=="het"){
bg.col <- "white"
title <- "HMW"
i <- 2
scale1 <- scale_colour_manual(guide_legend(title=""), values=c("darkolivegreen4", "darkolivegreen3", "darkolivegreen2")) # set colours and label names in legend
scale2 <- scale_fill_manual(guide_legend(title=""), values=c("darkolivegreen4", "darkolivegreen3", "darkolivegreen2")) # set fill (colours) and label names in legend
}else{
print("Problem with loop.")
}
ind <- which(obscasesAverted$pop==pop)
bp <- ggplot(obscasesAverted[ind,], mapping=aes_string(y = "outcome", x = "scenario"))+
geom_boxplot(outlier.shape=NA, aes_string(colour="scenario", fill="scenario")) +
stat_summary(geom = "crossbar", width=0.65, fatten=0, color="white", fun.data = function(x){ return(c(y=median(x), ymin=median(x), ymax=median(x))) })+
theme_hc() +
theme(
text= element_text(size=14),
panel.spacing = (unit(1, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
axis.title.y=element_text(margin=margin(0,10,0,0)),
strip.text=element_text(size = 12),
legend.position="none"
)+
scale1+
scale2+
labs(x="", y="observed cases averted after 5 years\ncompared with NAAT (per 100 000 persons)", title=title)+
theme(
panel.spacing = (unit(0.5, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
axis.title.y=element_text(margin=margin(0,10,0,0)),
axis.title.x=element_text(margin=margin(10,0,0,0)),
axis.text=element_text(colour="black"),
plot.title = element_text(hjust = 0.5)
)
pl[[i]] <- bp
# scale y-axis to exclude outliers (http://stackoverflow.com/questions/5677885/ignore-outliers-in-ggplot2-boxplot)
# compute lower and upper whiskers
isi <- 0
for (is in levels(obscasesAverted[ind,]$scenario)){
isel <- which(obscasesAverted$pop==pop & obscasesAverted$scenario==is)
isi <- isi + 1
ipi <- 0
for(ip in levels(obscasesAverted[ind,]$psi)){
ipi <- ipi + 1
ili <- 0
for(il in levels(obscasesAverted[ind,]$lambda_sigma)){
ili <- ili + 1
j <- which(obscasesAverted[isel,]$psi==ip & obscasesAverted[isel,]$lambda_sigma==il)
outcome.stats[i, isi, ipi, ili,] <- boxplot.stats(obscasesAverted[isel,][j,]$outcome)$stats
outcome.stats2[i, isi, ipi, ili,] <- quantile((obscasesAverted[isel,][j,]$outcome), c(0.25, 0.5, 0.75))
outcome.median[i, isi, ipi, ili] <- boxplot.stats(obscasesAverted[isel,][j,]$outcome)$stats[3]
outcome.median2[i, isi, ipi, ili] <- median(obscasesAverted[isel,][j,]$outcome)
outcome.mean[i, isi, ipi, ili] <- mean(obscasesAverted[isel,][j,]$outcome)
whisk.temp <- boxplot.stats(obscasesAverted[isel,][j,]$outcome)$stats[c(1, 5)]
if(whisk.temp[1]<ywhiskers[i,1]) ywhiskers[i,1] <- whisk.temp[1]
if(whisk.temp[2]>ywhiskers[i,2]) ywhiskers[i,2] <- whisk.temp[2]
}
}
}
# scale y limits based on whiskers (for two non-negative ywhisker values)
pl[[i]] <- pl[[i]] + coord_cartesian(ylim = ywhiskers[i,]*c(0.95, 1.05))
}
print(plot_grid(pl[[1]], pl[[2]], labels=c("A", "B"), ncol = 2, nrow = 1))
ggsave(paste("../figures/FigS13_tmp.pdf", sep=""), colormodel="cmyk", width=14, height=7)
# i, isi, ipi, ili
# pop, scenario, psi, lambda_a
# msm/het (1/2), POC+R/POC-R/culture, 30%/60%/90%, 30%/60%/90%,
# baseline: [,,2,3]
round(outcome.median[1,1,2,3]) # msm POC+R
round(outcome.median[1,2,2,3]) # msm POC-R
round(outcome.median[1,3,2,3]) # msm culture
round(outcome.median[2,1,2,3]) # het POC+R
round(outcome.median[2,2,2,3]) # het POC-R
round(outcome.median[2,3,2,3]) # het culture
# i, isi, ipi, ili
# pop, scenario, psi, lambda_a
# msm/het (1/2), POC+R/POC-R/culture, 30%/60%/90%, 30%/60%/90%,
# baseline: [,,2,3]
round(outcome.stats2[1,1,2,3,]) # msm POC+R
round(outcome.stats2[1,2,2,3,]) # msm POC-R
round(outcome.stats2[1,3,2,3,]) # msm culture
round(outcome.stats2[2,1,2,3,]) # het POC+R
round(outcome.stats2[2,2,2,3,]) # het POC-R
round(outcome.stats2[2,3,2,3,]) # het culture
setwd("~/PhD/ng_poc/repository/scripts/")
library(reshape2)
library(ggplot2)
library(ggthemes)
library(gridExtra)
library(gtable)
library(cowplot)
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
dvec <- c(1/365, 7/365)
psivec <- c(0.3, 0.6, 0.9)
lsvec <- c(0.3, 0.6, 0.9)
xirvec <- c(0, 0.25, 0.5, 0.6, 0.7, 0.8, 0.9, 0.99)
d <- 2
df <- c()
pn <- 201
for(pn in c(201, 202)){
for(pop in c("msm", "het")){
if(pop=="msm"){
popname <- "MSM"
}else{
popname <- "HMW"
}
if(pn==202){
load(paste("../data/FigS14/fr_", pop, "_", pn, ".data", sep=""))
ed8 <- fr
ed8[ed8==Inf] <- NA
ed8[ed8==-Inf] <- NA
a1 <- array(dim=dim(ed8[4,d,,,,]))
for(i in 1:8){
a1[,,i,] <- ed8[2,d,,,8,]
}
ned8 <- (ed8[4,d,,,,])/a1
med8 <- apply(ned8, c(1,2,3), function(x) median(x))
med8 <- melt(med8)
led8 <- cbind(med8, popname, "CULT")
names(led8) <- c( "psi", "lambda_sigma", "xi_r", "rrd", "pop", "test") # rrd = relative rate difference
df <- rbind(df, led8)
}else if(pn==201){
load(paste("../data/FigS14/fr_", pop, "_", pn, ".data", sep=""))
ed7 <- fr
ed7[ed7==Inf] <- NA
ed7[ed7==-Inf] <- NA
a5 <- array(dim=dim(ed7[4,d,,,,]))
for(i in 1:8){
a5[,,i,] <- ed7[3,d,,,7,]
}
ned7 <- (ed7[4,d,,,,])/a5
med7 <- apply(ned7, c(1,2,3), function(x) median(x))
med7 <- melt(med7)
led7 <- cbind(med7, popname, "NAAT")
names(led7) <- c( "psi", "lambda_sigma", "xi_r", "rrd", "pop", "test") # rrd = relative rate difference
df <- rbind(df, led7)
}
}
}
df[,1] <- as.factor(df[,1])
levels(df[,1]) <- paste("fraction treated that is symptomatic: ", as.character(psivec*100), " %", sep="")
df[,2] <- as.factor(df[,2])
levels(df[,2]) <- paste("fraction asymptomatic patients followed up: ", as.character(lsvec*100), " %", sep="")
for(i in 1:length(xirvec)){
df[which(df[,3]==i),3] <- xirvec[i]*100
}
pcult <- ggplot(df[which(df$test=="CULT"),], aes(x=xi_r, y=rrd))+
geom_ribbon(aes(ymin=min(rrd, na.rm=T), ymax=1), fill = cbPalette[5], alpha=0.2)+
theme_hc()+
geom_point(aes(col=psi, shape=psi), size=2.5)+
geom_line(aes(col=psi, linetype=lambda_sigma), size=0.7)+
xlab(expression("POC test sensitivity to detect resistance ("*xi["R, POC"]*" in %)"))+
ylab("ratio of resistance spread between POC and culture")+
scale_colour_manual(values=cbPalette[c(1,3,8)], name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_shape_discrete(name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_linetype_discrete(name  =expression("fraction of asymptomatic individuals who return for treatment at baseline ("*lambda["A, baseline"]*" in %)"),
labels=c(as.character(lsvec*100)))+
scale_y_log10(breaks=c(1,10,100))+
theme(strip.background = element_rect(fill = "white"))+
theme(legend.box="vertical")+
theme(
# text= element_text(size=18),
panel.spacing = (unit(0.5, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
#         axis.text.x=element_blank(),
axis.title.y=element_text(margin=margin(10,10,0,0)),
axis.title.x=element_text(margin=margin(10,0,10,0)),
axis.text=element_text(colour="black")
)
pnaat <- ggplot(df[which(df$test=="NAAT"),], aes(x=xi_r, y=rrd))+
geom_ribbon(aes(ymin=min(rrd, na.rm=T), ymax=1), fill = cbPalette[5], alpha=0.2)+
theme_hc()+
geom_point(aes(col=psi, shape=psi), size=2.5)+
geom_line(aes(col=psi, linetype=lambda_sigma), size=0.7)+
xlab(expression("POC test sensitivity to detect resistance ("*xi["R, POC"]*" in %)"))+
ylab("ratio of resistance spread between POC and NAAT")+
scale_colour_manual(values=cbPalette[c(1,3,8)], name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_shape_discrete(name  =expression("fraction of successfully treated individuals who were symptomatic at baseline ("*psi*" in %)"),
labels=c(as.character(psivec*100)))+
scale_linetype_discrete(name  =expression("fraction of asymptomatic individuals who return for treatment at baseline ("*lambda["A, baseline"]*" in %)"),
labels=c(as.character(lsvec*100)))+
theme(strip.background = element_rect(fill = "white"))+
theme(legend.box="vertical")+
theme(
# text= element_text(size=18),
panel.spacing = (unit(0.5, "cm")),
panel.grid.major.y=element_line(colour="gray"),
strip.background=element_rect(colour="white", fill="white"),
axis.ticks=element_blank(),
#         axis.text.x=element_blank(),
axis.title.y=element_text(margin=margin(10,10,0,0)),
axis.title.x=element_text(margin=margin(10,0,10,0)),
axis.text=element_text(colour="black")
)
pcult2 <- pcult + facet_wrap(~ pop)+
theme(panel.spacing = unit(2, "cm"))+
theme(text=element_text(size=18))
pnaat2 <- pnaat + facet_wrap(~ pop)+
theme(panel.spacing = unit(2, "cm"))+
theme(text=element_text(size=18))
print(plot_grid(pcult2, pnaat2, labels=c("A", "B"), ncol = 1, nrow = 2))
ggsave("../figures/FigS14_tmp.pdf", colormodel="cmyk", width=16, height=16)
